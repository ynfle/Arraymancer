m128	simd.html#m128	simd: m128	
m128d	simd.html#m128d	simd: m128d	
m128i	simd.html#m128i	simd: m128i	
m256	simd.html#m256	simd: m256	
m256d	simd.html#m256d	simd: m256d	
m256i	simd.html#m256i	simd: m256i	
m512	simd.html#m512	simd: m512	
m512d	simd.html#m512d	simd: m512d	
m512i	simd.html#m512i	simd: m512i	
mmask16	simd.html#mmask16	simd: mmask16	
mmask64	simd.html#mmask64	simd: mmask64	
mm_setzero_ps	simd.html#mm_setzero_ps	simd: mm_setzero_ps(): m128	
mm_set1_ps	simd.html#mm_set1_ps,float32	simd: mm_set1_ps(a: float32): m128	
mm_load_ps	simd.html#mm_load_ps,ptr.float32	simd: mm_load_ps(aligned_mem_addr: ptr float32): m128	
mm_loadu_ps	simd.html#mm_loadu_ps,ptr.float32	simd: mm_loadu_ps(data: ptr float32): m128	
mm_store_ps	simd.html#mm_store_ps,ptr.float32,m128	simd: mm_store_ps(mem_addr: ptr float32; a: m128)	
mm_storeu_ps	simd.html#mm_storeu_ps,ptr.float32,m128	simd: mm_storeu_ps(mem_addr: ptr float32; a: m128)	
mm_add_ps	simd.html#mm_add_ps,m128,m128	simd: mm_add_ps(a, b: m128): m128	
mm_sub_ps	simd.html#mm_sub_ps,m128,m128	simd: mm_sub_ps(a, b: m128): m128	
mm_mul_ps	simd.html#mm_mul_ps,m128,m128	simd: mm_mul_ps(a, b: m128): m128	
mm_max_ps	simd.html#mm_max_ps,m128,m128	simd: mm_max_ps(a, b: m128): m128	
mm_min_ps	simd.html#mm_min_ps,m128,m128	simd: mm_min_ps(a, b: m128): m128	
mm_or_ps	simd.html#mm_or_ps,m128,m128	simd: mm_or_ps(a, b: m128): m128	
mm_load_ss	simd.html#mm_load_ss,ptr.float32	simd: mm_load_ss(aligned_mem_addr: ptr float32): m128	
mm_add_ss	simd.html#mm_add_ss,m128,m128	simd: mm_add_ss(a, b: m128): m128	
mm_max_ss	simd.html#mm_max_ss,m128,m128	simd: mm_max_ss(a, b: m128): m128	
mm_min_ss	simd.html#mm_min_ss,m128,m128	simd: mm_min_ss(a, b: m128): m128	
mm_cvtss_f32	simd.html#mm_cvtss_f32,m128	simd: mm_cvtss_f32(a: m128): float32	
mm_movehl_ps	simd.html#mm_movehl_ps,m128,m128	simd: mm_movehl_ps(a, b: m128): m128	
mm_movelh_ps	simd.html#mm_movelh_ps,m128,m128	simd: mm_movelh_ps(a, b: m128): m128	
mm_setzero_pd	simd.html#mm_setzero_pd	simd: mm_setzero_pd(): m128d	
mm_set1_pd	simd.html#mm_set1_pd,float64	simd: mm_set1_pd(a: float64): m128d	
mm_load_pd	simd.html#mm_load_pd,ptr.float64	simd: mm_load_pd(aligned_mem_addr: ptr float64): m128d	
mm_loadu_pd	simd.html#mm_loadu_pd,ptr.float64	simd: mm_loadu_pd(mem_addr: ptr float64): m128d	
mm_store_pd	simd.html#mm_store_pd,ptr.float64,m128d	simd: mm_store_pd(mem_addr: ptr float64; a: m128d)	
mm_storeu_pd	simd.html#mm_storeu_pd,ptr.float64,m128d	simd: mm_storeu_pd(mem_addr: ptr float64; a: m128d)	
mm_add_pd	simd.html#mm_add_pd,m128d,m128d	simd: mm_add_pd(a, b: m128d): m128d	
mm_sub_pd	simd.html#mm_sub_pd,m128d,m128d	simd: mm_sub_pd(a, b: m128d): m128d	
mm_mul_pd	simd.html#mm_mul_pd,m128d,m128d	simd: mm_mul_pd(a, b: m128d): m128d	
mm_setzero_si128	simd.html#mm_setzero_si128	simd: mm_setzero_si128(): m128i	
mm_set1_epi8	simd.html#mm_set1_epi8	simd: mm_set1_epi8(a: int8 or uint8): m128i	
mm_set1_epi16	simd.html#mm_set1_epi16	simd: mm_set1_epi16(a: int16 or uint16): m128i	
mm_set1_epi32	simd.html#mm_set1_epi32	simd: mm_set1_epi32(a: int32 or uint32): m128i	
mm_set1_epi64x	simd.html#mm_set1_epi64x	simd: mm_set1_epi64x(a: int64 or uint64): m128i	
mm_load_si128	simd.html#mm_load_si128,ptr.m128i	simd: mm_load_si128(mem_addr: ptr m128i): m128i	
mm_loadu_si128	simd.html#mm_loadu_si128,ptr.m128i	simd: mm_loadu_si128(mem_addr: ptr m128i): m128i	
mm_storeu_si128	simd.html#mm_storeu_si128,ptr.m128i,m128i	simd: mm_storeu_si128(mem_addr: ptr m128i; a: m128i)	
mm_add_epi8	simd.html#mm_add_epi8,m128i,m128i	simd: mm_add_epi8(a, b: m128i): m128i	
mm_add_epi16	simd.html#mm_add_epi16,m128i,m128i	simd: mm_add_epi16(a, b: m128i): m128i	
mm_add_epi32	simd.html#mm_add_epi32,m128i,m128i	simd: mm_add_epi32(a, b: m128i): m128i	
mm_add_epi64	simd.html#mm_add_epi64,m128i,m128i	simd: mm_add_epi64(a, b: m128i): m128i	
mm_or_si128	simd.html#mm_or_si128,m128i,m128i	simd: mm_or_si128(a, b: m128i): m128i	
mm_and_si128	simd.html#mm_and_si128,m128i,m128i	simd: mm_and_si128(a, b: m128i): m128i	
mm_slli_epi64	simd.html#mm_slli_epi64,m128i,cint	simd: mm_slli_epi64(a: m128i; imm8: cint): m128i	
mm_srli_epi64	simd.html#mm_srli_epi64,m128i,cint	simd: mm_srli_epi64(a: m128i; imm8: cint): m128i	
mm_srli_epi32	simd.html#mm_srli_epi32,m128i,int32	simd: mm_srli_epi32(a: m128i; count: int32): m128i	
mm_slli_epi32	simd.html#mm_slli_epi32,m128i,int32	simd: mm_slli_epi32(a: m128i; count: int32): m128i	
mm_mullo_epi16	simd.html#mm_mullo_epi16,m128i,m128i	simd: mm_mullo_epi16(a, b: m128i): m128i	
mm_shuffle_epi32	simd.html#mm_shuffle_epi32,m128i,cint	simd: mm_shuffle_epi32(a: m128i; imm8: cint): m128i	
mm_mul_epu32	simd.html#mm_mul_epu32,m128i,m128i	simd: mm_mul_epu32(a: m128i; b: m128i): m128i	
mm_set_epi32	simd.html#mm_set_epi32,cint,cint,cint,cint	simd: mm_set_epi32(e3, e2, e1, e0: cint): m128i	
mm_castps_si128	simd.html#mm_castps_si128,m128	simd: mm_castps_si128(a: m128): m128i	
mm_castsi128_ps	simd.html#mm_castsi128_ps,m128i	simd: mm_castsi128_ps(a: m128i): m128	
mm_cvtps_epi32	simd.html#mm_cvtps_epi32,m128	simd: mm_cvtps_epi32(a: m128): m128i	
mm_cvtepi32_ps	simd.html#mm_cvtepi32_ps,m128i	simd: mm_cvtepi32_ps(a: m128i): m128	
mm_cmpgt_epi32	simd.html#mm_cmpgt_epi32,m128i,m128i	simd: mm_cmpgt_epi32(a, b: m128i): m128i	
mm_cvtsi128_si32	simd.html#mm_cvtsi128_si32,m128i	simd: mm_cvtsi128_si32(a: m128i): cint	
mm_extract_epi16	simd.html#mm_extract_epi16,m128i,cint	simd: mm_extract_epi16(a: m128i; imm8: cint): cint	
mm_movemask_epi8	simd.html#mm_movemask_epi8,m128i	simd: mm_movemask_epi8(a: m128i): int32	
mm_movehdup_ps	simd.html#mm_movehdup_ps,m128	simd: mm_movehdup_ps(a: m128): m128	
mm_moveldup_ps	simd.html#mm_moveldup_ps,m128	simd: mm_moveldup_ps(a: m128): m128	
mm_mullo_epi32	simd.html#mm_mullo_epi32,m128i,m128i	simd: mm_mullo_epi32(a, b: m128i): m128i	
mm256_setzero_ps	simd.html#mm256_setzero_ps	simd: mm256_setzero_ps(): m256	
mm256_set1_ps	simd.html#mm256_set1_ps,float32	simd: mm256_set1_ps(a: float32): m256	
mm256_load_ps	simd.html#mm256_load_ps,ptr.float32	simd: mm256_load_ps(aligned_mem_addr: ptr float32): m256	
mm256_loadu_ps	simd.html#mm256_loadu_ps,ptr.float32	simd: mm256_loadu_ps(mem_addr: ptr float32): m256	
mm256_store_ps	simd.html#mm256_store_ps,ptr.float32,m256	simd: mm256_store_ps(mem_addr: ptr float32; a: m256)	
mm256_storeu_ps	simd.html#mm256_storeu_ps,ptr.float32,m256	simd: mm256_storeu_ps(mem_addr: ptr float32; a: m256)	
mm256_add_ps	simd.html#mm256_add_ps,m256,m256	simd: mm256_add_ps(a, b: m256): m256	
mm256_mul_ps	simd.html#mm256_mul_ps,m256,m256	simd: mm256_mul_ps(a, b: m256): m256	
mm256_sub_ps	simd.html#mm256_sub_ps,m256,m256	simd: mm256_sub_ps(a, b: m256): m256	
mm256_and_ps	simd.html#mm256_and_ps,m256,m256	simd: mm256_and_ps(a, b: m256): m256	
mm256_or_ps	simd.html#mm256_or_ps,m256,m256	simd: mm256_or_ps(a, b: m256): m256	
mm256_min_ps	simd.html#mm256_min_ps,m256,m256	simd: mm256_min_ps(a, b: m256): m256	
mm256_max_ps	simd.html#mm256_max_ps,m256,m256	simd: mm256_max_ps(a, b: m256): m256	
mm256_castps256_ps128	simd.html#mm256_castps256_ps128,m256	simd: mm256_castps256_ps128(a: m256): m128	
mm256_extractf128_ps	simd.html#mm256_extractf128_ps,m256,	simd: mm256_extractf128_ps(v: m256; m: cint{lit}): m128	
mm256_setzero_pd	simd.html#mm256_setzero_pd	simd: mm256_setzero_pd(): m256d	
mm256_set1_pd	simd.html#mm256_set1_pd,float64	simd: mm256_set1_pd(a: float64): m256d	
mm256_load_pd	simd.html#mm256_load_pd,ptr.float64	simd: mm256_load_pd(aligned_mem_addr: ptr float64): m256d	
mm256_loadu_pd	simd.html#mm256_loadu_pd,ptr.float64	simd: mm256_loadu_pd(mem_addr: ptr float64): m256d	
mm256_store_pd	simd.html#mm256_store_pd,ptr.float64,m256d	simd: mm256_store_pd(mem_addr: ptr float64; a: m256d)	
mm256_storeu_pd	simd.html#mm256_storeu_pd,ptr.float64,m256d	simd: mm256_storeu_pd(mem_addr: ptr float64; a: m256d)	
mm256_add_pd	simd.html#mm256_add_pd,m256d,m256d	simd: mm256_add_pd(a, b: m256d): m256d	
mm256_mul_pd	simd.html#mm256_mul_pd,m256d,m256d	simd: mm256_mul_pd(a, b: m256d): m256d	
mm256_fmadd_ps	simd.html#mm256_fmadd_ps,m256,m256,m256	simd: mm256_fmadd_ps(a, b, c: m256): m256	
mm256_fmadd_pd	simd.html#mm256_fmadd_pd,m256d,m256d,m256d	simd: mm256_fmadd_pd(a, b, c: m256d): m256d	
mm256_setzero_si256	simd.html#mm256_setzero_si256	simd: mm256_setzero_si256(): m256i	
mm256_set1_epi8	simd.html#mm256_set1_epi8	simd: mm256_set1_epi8(a: int8 or uint8): m256i	
mm256_set1_epi16	simd.html#mm256_set1_epi16	simd: mm256_set1_epi16(a: int16 or uint16): m256i	
mm256_set1_epi32	simd.html#mm256_set1_epi32	simd: mm256_set1_epi32(a: int32 or uint32): m256i	
mm256_set1_epi64x	simd.html#mm256_set1_epi64x	simd: mm256_set1_epi64x(a: int64 or uint64): m256i	
mm256_load_si256	simd.html#mm256_load_si256,ptr.m256i	simd: mm256_load_si256(mem_addr: ptr m256i): m256i	
mm256_loadu_si256	simd.html#mm256_loadu_si256,ptr.m256i	simd: mm256_loadu_si256(mem_addr: ptr m256i): m256i	
mm256_storeu_si256	simd.html#mm256_storeu_si256,ptr.m256i,m256i	simd: mm256_storeu_si256(mem_addr: ptr m256i; a: m256i)	
mm256_castps_si256	simd.html#mm256_castps_si256,m256	simd: mm256_castps_si256(a: m256): m256i	
mm256_castsi256_ps	simd.html#mm256_castsi256_ps,m256i	simd: mm256_castsi256_ps(a: m256i): m256	
mm256_cvtps_epi32	simd.html#mm256_cvtps_epi32,m256	simd: mm256_cvtps_epi32(a: m256): m256i	
mm256_cvtepi32_ps	simd.html#mm256_cvtepi32_ps,m256i	simd: mm256_cvtepi32_ps(a: m256i): m256	
mm256_add_epi8	simd.html#mm256_add_epi8,m256i,m256i	simd: mm256_add_epi8(a, b: m256i): m256i	
mm256_add_epi16	simd.html#mm256_add_epi16,m256i,m256i	simd: mm256_add_epi16(a, b: m256i): m256i	
mm256_add_epi32	simd.html#mm256_add_epi32,m256i,m256i	simd: mm256_add_epi32(a, b: m256i): m256i	
mm256_add_epi64	simd.html#mm256_add_epi64,m256i,m256i	simd: mm256_add_epi64(a, b: m256i): m256i	
mm256_and_si256	simd.html#mm256_and_si256,m256i,m256i	simd: mm256_and_si256(a, b: m256i): m256i	
mm256_srli_epi64	simd.html#mm256_srli_epi64,m256i,cint	simd: mm256_srli_epi64(a: m256i; imm8: cint): m256i	
mm256_mullo_epi16	simd.html#mm256_mullo_epi16,m256i,m256i	simd: mm256_mullo_epi16(a, b: m256i): m256i	
mm256_mullo_epi32	simd.html#mm256_mullo_epi32,m256i,m256i	simd: mm256_mullo_epi32(a, b: m256i): m256i	
mm256_shuffle_epi32	simd.html#mm256_shuffle_epi32,m256i,cint	simd: mm256_shuffle_epi32(a: m256i; imm8: cint): m256i	
mm256_mul_epu32	simd.html#mm256_mul_epu32,m256i,m256i	simd: mm256_mul_epu32(a: m256i; b: m256i): m256i	
mm256_movemask_epi8	simd.html#mm256_movemask_epi8,m256i	simd: mm256_movemask_epi8(a: m256i): int32	
mm256_cmpgt_epi32	simd.html#mm256_cmpgt_epi32,m256i,m256i	simd: mm256_cmpgt_epi32(a, b: m256i): m256i	
mm256_srli_epi32	simd.html#mm256_srli_epi32,m256i,int32	simd: mm256_srli_epi32(a: m256i; count: int32): m256i	
mm256_slli_epi32	simd.html#mm256_slli_epi32,m256i,int32	simd: mm256_slli_epi32(a: m256i; count: int32): m256i	
mm_i32gather_epi32	simd.html#mm_i32gather_epi32,ptr.,m128i,int32	simd: mm_i32gather_epi32(m: ptr (uint32 or int32); i: m128i; s: int32): m128i	
mm256_i32gather_epi32	simd.html#mm256_i32gather_epi32,ptr.,m256i,int32	simd: mm256_i32gather_epi32(m: ptr (uint32 or int32); i: m256i; s: int32): m256i	
mm512_setzero_ps	simd.html#mm512_setzero_ps	simd: mm512_setzero_ps(): m512	
mm512_set1_ps	simd.html#mm512_set1_ps,float32	simd: mm512_set1_ps(a: float32): m512	
mm512_load_ps	simd.html#mm512_load_ps,ptr.float32	simd: mm512_load_ps(aligned_mem_addr: ptr float32): m512	
mm512_loadu_ps	simd.html#mm512_loadu_ps,ptr.float32	simd: mm512_loadu_ps(mem_addr: ptr float32): m512	
mm512_store_ps	simd.html#mm512_store_ps,ptr.float32,m512	simd: mm512_store_ps(mem_addr: ptr float32; a: m512)	
mm512_storeu_ps	simd.html#mm512_storeu_ps,ptr.float32,m512	simd: mm512_storeu_ps(mem_addr: ptr float32; a: m512)	
mm512_add_ps	simd.html#mm512_add_ps,m512,m512	simd: mm512_add_ps(a, b: m512): m512	
mm512_sub_ps	simd.html#mm512_sub_ps,m512,m512	simd: mm512_sub_ps(a, b: m512): m512	
mm512_mul_ps	simd.html#mm512_mul_ps,m512,m512	simd: mm512_mul_ps(a, b: m512): m512	
mm512_fmadd_ps	simd.html#mm512_fmadd_ps,m512,m512,m512	simd: mm512_fmadd_ps(a, b, c: m512): m512	
mm512_min_ps	simd.html#mm512_min_ps,m512,m512	simd: mm512_min_ps(a, b: m512): m512	
mm512_max_ps	simd.html#mm512_max_ps,m512,m512	simd: mm512_max_ps(a, b: m512): m512	
mm512_or_ps	simd.html#mm512_or_ps,m512,m512	simd: mm512_or_ps(a, b: m512): m512	
mm512_setzero_pd	simd.html#mm512_setzero_pd	simd: mm512_setzero_pd(): m512d	
mm512_set1_pd	simd.html#mm512_set1_pd,float64	simd: mm512_set1_pd(a: float64): m512d	
mm512_load_pd	simd.html#mm512_load_pd,ptr.float64	simd: mm512_load_pd(aligned_mem_addr: ptr float64): m512d	
mm512_loadu_pd	simd.html#mm512_loadu_pd,ptr.float64	simd: mm512_loadu_pd(mem_addr: ptr float64): m512d	
mm512_store_pd	simd.html#mm512_store_pd,ptr.float64,m512d	simd: mm512_store_pd(mem_addr: ptr float64; a: m512d)	
mm512_storeu_pd	simd.html#mm512_storeu_pd,ptr.float64,m512d	simd: mm512_storeu_pd(mem_addr: ptr float64; a: m512d)	
mm512_add_pd	simd.html#mm512_add_pd,m512d,m512d	simd: mm512_add_pd(a, b: m512d): m512d	
mm512_mul_pd	simd.html#mm512_mul_pd,m512d,m512d	simd: mm512_mul_pd(a, b: m512d): m512d	
mm512_fmadd_pd	simd.html#mm512_fmadd_pd,m512d,m512d,m512d	simd: mm512_fmadd_pd(a, b, c: m512d): m512d	
mm512_setzero_si512	simd.html#mm512_setzero_si512	simd: mm512_setzero_si512(): m512i	
mm512_set1_epi8	simd.html#mm512_set1_epi8	simd: mm512_set1_epi8(a: int8 or uint8): m512i	
mm512_set1_epi16	simd.html#mm512_set1_epi16	simd: mm512_set1_epi16(a: int16 or uint16): m512i	
mm512_set1_epi32	simd.html#mm512_set1_epi32	simd: mm512_set1_epi32(a: int32 or uint32): m512i	
mm512_set1_epi64	simd.html#mm512_set1_epi64	simd: mm512_set1_epi64(a: int64 or uint64): m512i	
mm512_load_si512	simd.html#mm512_load_si512,ptr.SomeInteger	simd: mm512_load_si512(mem_addr: ptr SomeInteger): m512i	
mm512_loadu_si512	simd.html#mm512_loadu_si512,ptr.SomeInteger	simd: mm512_loadu_si512(mem_addr: ptr SomeInteger): m512i	
mm512_storeu_si512	simd.html#mm512_storeu_si512,ptr.SomeInteger,m512i	simd: mm512_storeu_si512(mem_addr: ptr SomeInteger; a: m512i)	
mm512_add_epi8	simd.html#mm512_add_epi8,m512i,m512i	simd: mm512_add_epi8(a, b: m512i): m512i	
mm512_add_epi16	simd.html#mm512_add_epi16,m512i,m512i	simd: mm512_add_epi16(a, b: m512i): m512i	
mm512_add_epi32	simd.html#mm512_add_epi32,m512i,m512i	simd: mm512_add_epi32(a, b: m512i): m512i	
mm512_add_epi64	simd.html#mm512_add_epi64,m512i,m512i	simd: mm512_add_epi64(a, b: m512i): m512i	
mm512_mullo_epi32	simd.html#mm512_mullo_epi32,m512i,m512i	simd: mm512_mullo_epi32(a, b: m512i): m512i	
mm512_mullo_epi64	simd.html#mm512_mullo_epi64,m512i,m512i	simd: mm512_mullo_epi64(a, b: m512i): m512i	
mm512_and_si512	simd.html#mm512_and_si512,m512i,m512i	simd: mm512_and_si512(a, b: m512i): m512i	
mm512_cmpgt_epi32_mask	simd.html#mm512_cmpgt_epi32_mask,m512i,m512i	simd: mm512_cmpgt_epi32_mask(a, b: m512i): mmask16	
mm512_maskz_set1_epi32	simd.html#mm512_maskz_set1_epi32,mmask16,cint	simd: mm512_maskz_set1_epi32(k: mmask16; a: cint): m512i	
mm512_movm_epi32	simd.html#mm512_movm_epi32,mmask16	simd: mm512_movm_epi32(a: mmask16): m512i	
mm512_movepi8_mask	simd.html#mm512_movepi8_mask,m512i	simd: mm512_movepi8_mask(a: m512i): mmask64	
mm512_srli_epi32	simd.html#mm512_srli_epi32,m512i,int32	simd: mm512_srli_epi32(a: m512i; count: int32): m512i	
mm512_slli_epi32	simd.html#mm512_slli_epi32,m512i,int32	simd: mm512_slli_epi32(a: m512i; count: int32): m512i	
mm512_i32gather_epi32	simd.html#mm512_i32gather_epi32,m512i,ptr.,int32	simd: mm512_i32gather_epi32(i: m512i; m: ptr (uint32 or int32); s: int32): m512i	
mm512_castps_si512	simd.html#mm512_castps_si512,m512	simd: mm512_castps_si512(a: m512): m512i	
mm512_castsi512_ps	simd.html#mm512_castsi512_ps,m512i	simd: mm512_castsi512_ps(a: m512i): m512	
mm512_cvtps_epi32	simd.html#mm512_cvtps_epi32,m512	simd: mm512_cvtps_epi32(a: m512): m512i	
mm512_cvtepi32_ps	simd.html#mm512_cvtepi32_ps,m512i	simd: mm512_cvtepi32_ps(a: m512i): m512	
cvtmask64_u64	simd.html#cvtmask64_u64,mmask64	simd: cvtmask64_u64(a: mmask64): uint64	
