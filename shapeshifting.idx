transpose	shapeshifting.html#transpose,Tensor	shapeshifting: transpose(t: Tensor): Tensor	
asContiguous	shapeshifting.html#asContiguous,Tensor[T],OrderType,bool	shapeshifting: asContiguous[T](t: Tensor[T]; layout: OrderType = rowMajor; force: bool = false): Tensor[\n    T]	
reshape	shapeshifting.html#reshape,Tensor,varargs[int]	shapeshifting: reshape(t: Tensor; new_shape: varargs[int]): Tensor	
reshape	shapeshifting.html#reshape,Tensor,Metadata	shapeshifting: reshape(t: Tensor; new_shape: Metadata): Tensor	
broadcast	shapeshifting.html#broadcast,Tensor[T],varargs[int]	shapeshifting: broadcast[T](t: Tensor[T]; shape: varargs[int]): Tensor[T]	
broadcast	shapeshifting.html#broadcast,Tensor[T],Metadata	shapeshifting: broadcast[T](t: Tensor[T]; shape: Metadata): Tensor[T]	
broadcast	shapeshifting.html#broadcast,T,varargs[int]	shapeshifting: broadcast[T: SomeNumber](val: T; shape: varargs[int]): Tensor[T]	
broadcast	shapeshifting.html#broadcast,T,Metadata	shapeshifting: broadcast[T: SomeNumber](val: T; shape: Metadata): Tensor[T]	
bc	shapeshifting.html#bc.t,,varargs[int]	shapeshifting: bc(t: (Tensor | SomeNumber); shape: varargs[int]): untyped	
bc	shapeshifting.html#bc.t,,Metadata	shapeshifting: bc(t: (Tensor | SomeNumber); shape: Metadata): untyped	
broadcast2	shapeshifting.html#broadcast2,Tensor[T],Tensor[T]	shapeshifting: broadcast2[T](a, b: Tensor[T]): tuple[a, b: Tensor[T]]	
permute	shapeshifting.html#permute,Tensor,varargs[int]	shapeshifting: permute(t: Tensor; dims: varargs[int]): Tensor	
concat	shapeshifting.html#concat,varargs[Tensor[T]],int	shapeshifting: concat[T](t_list: varargs[Tensor[T]]; axis: int): Tensor[T]	
squeeze	shapeshifting.html#squeeze,AnyTensor	shapeshifting: squeeze(t: AnyTensor): AnyTensor	
squeeze	shapeshifting.html#squeeze,Tensor,Natural	shapeshifting: squeeze(t: Tensor; axis: Natural): Tensor	
unsqueeze	shapeshifting.html#unsqueeze,Tensor,Natural	shapeshifting: unsqueeze(t: Tensor; axis: Natural): Tensor	
stack	shapeshifting.html#stack,varargs[Tensor[T]],Natural	shapeshifting: stack[T](tensors: varargs[Tensor[T]]; axis: Natural = 0): Tensor[T]	
split	shapeshifting.html#split,Tensor[T],Positive,Natural	shapeshifting: split[T](t: Tensor[T]; chunk_size: Positive; axis: Natural): seq[Tensor[T]]	
chunk	shapeshifting.html#chunk,Tensor[T],Positive,Natural	shapeshifting: chunk[T](t: Tensor[T]; nb_chunks: Positive; axis: Natural): seq[Tensor[T]]	
