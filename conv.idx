im2col	conv.html#im2col,Tensor[T],Size2D,Size2D,Size2D,Tensor[T]	conv: im2col[T](input: Tensor[T]; kernel_size: Size2D; padding: Size2D = (0, 0);\n          stride: Size2D = (1, 1); result: var Tensor[T])	
col2im	conv.html#col2im,Tensor[T],int,int,int,Size2D,Size2D,Size2D	conv: col2im[T](input: Tensor[T]; channels, height, width: int; kernel_size: Size2D;\n          padding: Size2D = (0, 0); stride: Size2D = (1, 1)): Tensor[T]	
im2colgemm_conv2d	conv.html#im2colgemm_conv2d,Tensor[T],Tensor[T],Tensor[T],Size2D,Size2D	conv: im2colgemm_conv2d[T](input, kernel, bias: Tensor[T]; padding: Size2D = (0, 0);\n                     stride: Size2D = (1, 1)): Tensor[T]	
im2colgemm_conv2d_gradient	conv.html#im2colgemm_conv2d_gradient,Tensor[T],Tensor[T],Size2D,Size2D,Tensor[T],Tensor[T],Tensor[T]	conv: im2colgemm_conv2d_gradient[T](input, kernel: Tensor[T];\n                              padding: Size2D = (0, 0);\n                              stride: Size2D = (1, 1); grad_output: Tensor[T];\n                              grad_input, grad_weight: var Tensor[T])	
