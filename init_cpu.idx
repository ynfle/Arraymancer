newTensorUninit	init_cpu.html#newTensorUninit,varargs[int]	init_cpu: newTensorUninit[T](shape: varargs[int]): Tensor[T]	
newTensorUninit	init_cpu.html#newTensorUninit,int	init_cpu: newTensorUninit[T](size: int): Tensor[T]	
newTensorUninit	init_cpu.html#newTensorUninit,Metadata	init_cpu: newTensorUninit[T](shape: Metadata): Tensor[T]	
newTensorWith	init_cpu.html#newTensorWith,varargs[int],T	init_cpu: newTensorWith[T](shape: varargs[int]; value: T): Tensor[T]	
newTensorWith	init_cpu.html#newTensorWith,Metadata,T	init_cpu: newTensorWith[T](shape: Metadata; value: T): Tensor[T]	
zeros	init_cpu.html#zeros,varargs[int]	init_cpu: zeros[T: SomeNumber | Complex[float32] | Complex[float64]](shape: varargs[int]): Tensor[\n    T]	
zeros	init_cpu.html#zeros,Metadata	init_cpu: zeros[T: SomeNumber | Complex[float32] | Complex[float64]](shape: Metadata): Tensor[\n    T]	
zeros_like	init_cpu.html#zeros_like,Tensor[T: int or int8 or int16 or int32 or int64 or uint or uint8 or uint16 or uint32 or uint64 or float or float32 or float64 or Complex[system.float32] or Complex[system.float64]]	init_cpu: zeros_like[T: SomeNumber | Complex[float32] | Complex[float64]](t: Tensor[T]): Tensor[\n    T]	
ones	init_cpu.html#ones,varargs[int]	init_cpu: ones[T: SomeNumber | Complex[float32] | Complex[float64]](shape: varargs[int]): Tensor[\n    T]	
ones	init_cpu.html#ones,Metadata	init_cpu: ones[T: SomeNumber | Complex[float32] | Complex[float64]](shape: Metadata): Tensor[\n    T]	
ones_like	init_cpu.html#ones_like,Tensor[T: int or int8 or int16 or int32 or int64 or uint or uint8 or uint16 or uint32 or uint64 or float or float32 or float64 or Complex[system.float32] or Complex[system.float64]]	init_cpu: ones_like[T: SomeNumber | Complex[float32] | Complex[float64]](t: Tensor[T]): Tensor[\n    T]	
arange	init_cpu.html#arange,T,T,T	init_cpu: arange[T: SomeNumber](start, stop, step: T): Tensor[T]	
arange	init_cpu.html#arange.t,T	init_cpu: arange[T: SomeNumber](stop: T): Tensor[T]	
arange	init_cpu.html#arange.t,T,T	init_cpu: arange[T: SomeNumber](start, stop: T): Tensor[T]	
randomTensor	init_cpu.html#randomTensor,varargs[int],T	init_cpu: randomTensor[T: SomeFloat](shape: varargs[int]; max: T): Tensor[T]	
randomTensor	init_cpu.html#randomTensor,varargs[int],int	init_cpu: randomTensor(shape: varargs[int]; max: int): Tensor[int]	
randomTensor	init_cpu.html#randomTensor,varargs[int],Slice[T]	init_cpu: randomTensor[T](shape: varargs[int]; slice: Slice[T]): Tensor[T]	
randomTensor	init_cpu.html#randomTensor,varargs[int],openArray[T]	init_cpu: randomTensor[T](shape: varargs[int]; sample_source: openArray[T]): Tensor[T]	
randomNormalTensor	init_cpu.html#randomNormalTensor,varargs[int],T,T	init_cpu: randomNormalTensor[T: SomeFloat](shape: varargs[int]; mean: T = 0; std: T = 1): Tensor[\n    T]	
linspace	init_cpu.html#linspace,T,T,int	init_cpu: linspace[T: SomeNumber](start, stop: T; num: int; endpoint = true): Tensor[float]	
logspace	init_cpu.html#logspace,T,T,int,float	init_cpu: logspace[T: SomeNumber](start, stop: T; num: int; base = 10.0; endpoint = true): Tensor[\n    float]	
